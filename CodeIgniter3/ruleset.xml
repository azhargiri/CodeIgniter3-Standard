<?xml version="1.0" encoding="UTF-8" ?>
<ruleset name="CodeIgniter3">
    <description>CodeIgniter 3 coding standard for PHP_CodeSniffer</description>
    <!-- 
     * CodeIgniter 3 coding standard for PHP_CodeSniffer
     *
     * Standard: http://www.codeigniter.com/userguide3/general/styleguide.html Feb 05, 2015.
     *
     * @author    Louis Linehan <louis.linehan@gmail.com>
     * @copyright 2017 Louis Linehan
     * @license   https://github.com/louisl/CodeIgniter3-Standard/blob/master/LICENSE MIT License
     * @version   Version 1.0.0
    -->
    <arg name="tab-width" value="4"/>
    <!--
    File Format
    Files should be saved with Unicode (UTF-8) encoding. The BOM should not 
    be used. Unlike UTF-16 and UTF-32, there’s no byte order to indicate in a 
    UTF-8 encoded file, and the BOM can have a negative side effect in PHP of 
    sending output, preventing the application from being able to set its 
    own headers. Unix line endings should be used (LF).
    -->
    <rule ref="Generic.Files.ByteOrderMark"/>
    <!--
    PHP Closing Tag
    The PHP closing tag on a PHP document ?> is optional to the PHP parser. 
    However, if used, any whitespace following the closing tag, whether 
    introduced by the developer, user, or an FTP application, can cause 
    unwanted output, PHP errors, or if the latter are suppressed, blank pages. 
    For this reason, all PHP files MUST OMIT the PHP closing tag and end 
    with a single empty line instead.
    -->
    <rule ref="PSR2.Files.EndFileNewline"/>
    <!--
    File Naming
    Class files must be named in a Ucfirst-like manner, while any other 
    file name (configurations, views, generic scripts, etc.) should be in 
    all lowercase.
    -->
    <rule ref="CodeIgniter3.Files.UppercaseFirstClassFilename"/>
    <!--
    Furthermore, class file names should match the name of the class itself. 
    For example, if you have a class named Myclass, then its filename must 
    be Myclass.php.
    -->
    <rule ref="CodeIgniter3.NamingConventions.ValidClassName"/>
    <!--
    Class and Method Naming
    Class names should always start with an uppercase letter. Multiple words 
    should be separated with an underscore, and not CamelCased.
    -->
    <!-- Checked in CodeIgniter3.NamingConventions.ValidClassName -->
    <!--
    Class methods should be entirely lowercased and named to clearly 
    indicate their function, preferably including a verb. Try to avoid overly 
    long and verbose names. Multiple words should be separated with an underscore.
    -->
    <rule ref="CodeIgniter3.NamingConventions.ValidMethodName"/>
    <rule ref="CodeIgniter3.NamingConventions.ValidFunctionName"/>
    <!--
    Variable Names
    The guidelines for variable naming are very similar to those used for 
    class methods. Variables should contain only lowercase letters, use 
    underscore separators, and be reasonably named to indicate their purpose 
    and contents. Very short, non-word variables should only be used as 
    iterators in for() loops.
    -->
    <rule ref="CodeIgniter3.NamingConventions.ValidVariableName"/>
    <!--
    Commenting
    In general, code should be commented prolifically. It not only helps 
    describe the flow and intent of the code for less experienced programmers, 
    but can prove invaluable when returning to your own code months down 
    the line. There is not a required format for comments, but the 
    following are recommended.
    -->
    <!--
    DocBlock style comments preceding class, method, and property declarations 
    so they can be picked up by IDEs.
    -->
    <rule ref="Generic.Commenting.DocComment"/>
    <rule ref="PEAR.Commenting.FunctionComment"/>
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>
    <rule ref="CodeIgniter3.Commenting.FileComment">
        <properties>
          <property name="error" value="false"/>
        </properties>
    </rule>
    <rule ref="CodeIgniter3.Commenting.ClassComment"/>
    <rule ref="Squiz.Commenting.VariableComment">
        <properties>
          <property name="error" value="false"/>
        </properties>
    </rule>
    <!--
    Use single line comments within code, leaving a blank line between large 
    comment blocks and code.
    --> 
    <!--
    Constants
    Constants follow the same guidelines as do variables, except constants 
    should always be fully uppercase. Always use CodeIgniter constants when 
    appropriate, i.e. SLASH, LD, RD, PATH_CACHE, etc.
    -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <!--
    TRUE, FALSE, and NULL
    TRUE, FALSE, and NULL keywords should always be fully uppercase.
    -->
    <rule ref="Generic.PHP.UpperCaseConstant"/>
    <!--
    Logical Operators
    Use of the || “or” comparison operator is discouraged, as its clarity on 
    some output devices is low (looking like the number 11, for instance). 
    && is preferred over AND but either are acceptable, and a space 
    should always precede and follow !.
    -->
    <rule ref="CodeIgniter3.Operators.LogicalOr"/>
    <rule ref="CodeIgniter3.Operators.BooleanAnd"/>
    <rule ref="CodeIgniter3.WhiteSpace.BooleanNotSpaceBefore"/>
    <rule ref="CodeIgniter3.WhiteSpace.BooleanNotSpaceAfter"/>
    <!--
    Comparing Return Values and Typecasting
    Some PHP functions return FALSE on failure, but may also have a valid 
    return value of “” or 0, which would evaluate to FALSE in loose 
    comparisons. Be explicit by comparing the variable type when using 
    these return values in conditionals to ensure the return value is 
    indeed what you expect, and not a value that has an equivalent 
    loose-type evaluation.

    Use the same stringency in returning and checking your own variables. 
    Use === and !== as necessary.
    -->
    <!--
    Is identical "===" must be used. Not is equal "==".
    -->
    <rule ref="CodeIgniter3.Operators.IsIdentical"/>
    <!--
    Is not identical "!==" must be used. Not is not equal "!=".
    -->
    <rule ref="CodeIgniter3.Operators.IsNotIdentical"/>
    <!--
    See also information regarding typecasting, which can be quite useful. 
    Typecasting has a slightly different effect which may be desirable. 
    When casting a variable as a string, for instance, NULL and boolean 
    FALSE variables become empty strings, 0 (and other numbers) become 
    strings of digits, and boolean TRUE becomes “1”:
    -->
    <!-- Can't sniff reliably, this is the developers responsibility. -->
    <!--
    Debugging Code
    Do not leave debugging code in your submissions, even when commented out.
    Things such as var_dump(), print_r(), die()/exit() should not be included 
    in your code unless it serves a specific purpose other than debugging.
    -->
    <rule ref="CodeIgniter3.PHP.DiscouragedFunctions"/>
    <!--
    Whitespace in Files
    No whitespace can precede the opening PHP tag or follow the closing 
    PHP tag. Output is buffered, so whitespace in your files can cause 
    output to begin before CodeIgniter outputs its content, leading to 
    errors and an inability for CodeIgniter to send proper headers.
    -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    <rule ref="CodeIgniter3.WhiteSpace.VerticalEmptyLines"/>
    <!--
    Compatibility
    CodeIgniter recommends PHP 5.4 or newer to be used, but it should be 
    compatible with PHP 5.2.4. Your code must either be compatible with this 
    requirement, provide a suitable fallback, or be an optional feature that 
    dies quietly without affecting a user’s application.

    Additionally, do not use PHP functions that require non-default libraries 
    to be installed unless your code contains an alternative method when 
    the function is not available.
    -->
    <!--
    One File per Class
    Use separate files for each class, unless the classes are closely related. 
    An example of a CodeIgniter file that contains multiple classes is the 
    Xmlrpc library file.
    -->
    <rule ref="Generic.Files.OneClassPerFile"/>
    <!--
    Whitespace
    Use tabs for whitespace in your code, not spaces. This may seem like a 
    small thing, but using tabs instead of whitespace allows the developer 
    looking at your code to have indentation at levels that they prefer and 
    customize in whatever application they use. And as a side benefit, 
    it results in (slightly) more compact files, storing one tab character 
    versus, say, four space characters.
    -->
     <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="tabIndent" value="true"/>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>
    <!--
    Line Breaks
    Files must be saved with Unix line breaks. This is more of an issue for 
    developers who work in Windows, but in any case ensure that your text 
    editor is setup to save files with Unix line breaks.
    -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>
    <!--
    Code Indenting
    Use Allman style indenting. With the exception of Class declarations, 
    braces are always placed on a line by themselves, and indented at the 
    same level as the control statement that “owns” them.
    -->
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>
    <rule ref="CodeIgniter3.ControlStructures.AllmanControlSignature"/>
    <rule ref="CodeIgniter3.ControlStructures.ControlStructureSpacing"/>
    <!--
    Bracket and Parenthetic Spacing
    In general, parenthesis and brackets should not use any additional spaces. 
    The exception is that a space should always follow PHP control structures 
    that accept arguments with parenthesis (declare, do-while, elseif, for, 
    foreach, if, switch, while), to help distinguish them from functions 
    and increase readability.
    -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/> 
    <!--
    Localized Text
    CodeIgniter libraries should take advantage of corresponding language 
    files whenever possible.
    -->
    <!-- Can't sniff reliably, this is the developers responsibility. -->
    <!--
    Private Methods and Variables
    Methods and variables that are only accessed internally, such as 
    utility and helper functions that your public methods use for code 
    abstraction, should be prefixed with an underscore.
    -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
    <!--
    PHP Errors
    Code must run error free and not rely on warnings and notices to be hidden 
    to meet this requirement. For instance, never access a variable that 
    you did not set yourself (such as $_POST array keys) without 
    first checking to see that it isset().
    -->
    <!-- @todo Can this be sniffed? -->
    <!--
    Short Open Tags
    Always use full PHP opening tags, in case a server does not have 
    short_open_tag enabled.
    -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <!--
    Allow short php echo tags "<?=".
    -->
    <rule ref="Generic.PHP.DisallowShortOpenTag.EchoFound">
        <severity>0</severity>
    </rule>
    <!--
    One Statement Per Line
    Never combine statements on one line.
    -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <!--
    Strings
    Always use single quoted strings unless you need variables parsed, 
    and in cases where you do need variables parsed, use braces to prevent 
    greedy token parsing. You may also use double-quoted strings if the 
    string contains single quotes, so you do not have to use escape characters.
    -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <!--
    SQL Queries
    SQL keywords are always capitalized: SELECT, INSERT, UPDATE, WHERE, AS, 
    JOIN, ON, IN, etc.

    Break up long queries into multiple lines for legibility, preferably 
    breaking for each clause.
    -->
    <!--
    Default Function Arguments
    Whenever appropriate, provide function argument defaults, which helps 
    prevent PHP errors with mistaken calls and provides common fallback 
    values which can save a few lines of code.
    -->
    <!--
    Can't sniff reliably, this is the developers responsibility. But we are 
    checking Method arguments with default values MUST go at the end of the 
    argument list in. (PSR-2) 4.4. PEAR.Functions.ValidDefaultValue
    -->

    <!-- Standard practice -->
    <!--
    (PSR-2) 2.3. Lines
    The soft limit on line length MUST be 120 characters; automated style 
    checkers MUST warn but MUST NOT error at the soft limit.
    -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
    </rule>
    <!-- 
    (PSR-2) 4.4. Method Arguments
    Method arguments with default values MUST go at the end of the argument list.
    -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    <!--
    (PSR-2) 4.4. Method Arguments
    Argument lists MAY be split across multiple lines, where each subsequent 
    line is indented once. When doing so, the first item in the list MUST 
    be on the next line, and there MUST be only one argument per line. When 
    the argument list is split across multiple lines, the closing parenthesis 
    and opening brace MUST be placed together on their own line with one space 
    between them.
    -->
    <rule ref="CodeIgniter3.Functions.FunctionDeclaration"/>


    <!--
    (PSR-2) 4.6. Method and Function Calls
    In the argument list, there MUST NOT be a space before each comma, and 
    there MUST be one space after each comma.
    -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>
    
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>
    <rule ref="CodeIgniter3.WhiteSpace.FunctionClosingBraceSpace"/>
    <!--
    (PSR-2) 5. Control Structures
    The general style rules for control structures are as follows:
    There MUST be one space after the control structure keyword
    There MUST NOT be a space after the opening parenthesis
    There MUST NOT be a space before the closing parenthesis
    There MUST be one space between the closing parenthesis and the opening brace
    The structure body MUST be indented once
    The closing brace MUST be on the next line after the body
    -->
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <!-- 
    The body of each structure MUST be enclosed by braces. This standardizes 
    how the structures look, and reduces the likelihood of introducing errors 
    as new lines get added to the body.
    -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!-- Personal Prefs -->
    <!--
    Warning for @todo comments
    -->
    <rule ref="Generic.Commenting.Todo"/>
    <!--
    String concatenation 1 space
    ''.'' to '' . ''
    -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
          <property name="spacing" value="1"/>
        </properties>
    </rule>
    <!--
    Operator spacing 1 space
    array(''=>'Please select') to array('' => 'Please select')
    $var='' to $var = '' etc.
    -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
          <property name="ignoreNewlines" value="false"/>
        </properties>
    </rule>
</ruleset>
